#!/usr/bin/env python

"""a script to simulate Poissonian sparse X-ray data
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import sys

import numpy as np
import h5py

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
import utils

#-------------------------------------------------

FIGTYPES = ['png', 'pdf']

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('-n', '--noise-mean-differential-rate-bounds', nargs=2, type=float, default=(50, 150.0),
    help='bounds for the distribution from which the DC component of the noise model is drawn. \
Each segment is drawn with a different true noise rate ~ U(low, high), and the expected number of events is 2*pi*mean_differential_rate. \
e.g. -n 50 150')

parser.add_argument('-s', '--signal-mean-differential-rate', type=float, default=10.0,
    help='the DC component of the signal model. The expected number of events is 2*pi*mean_differential_rate')

parser.add_argument('-c', '--periodic-signal-component', nargs=3, type=float, action='append', default=[],
    help='the harmonic, coefficient, and phase for a fourier component in the signal model. \
This only sets the relative amplitude of different harmonics. The overall process will be normalized \
to match --signal-mean. e.g. "--signal-component harmonic_number coefficient phase"')

parser.add_argument('--seed', default=None, type=int)
parser.add_argument('-N', '--num-trials', default=100, type=int,
    help='the number of trials to perform. Each trial will be written into a separate group within the overall HDF file')

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('--histogram', default=False, action='store_true',
    help='plot a histogram of cumulative signal and noise distributions as a sanity check')

args = parser.parse_args()

args.verbose |= args.Verbose

args.output_dir = os.path.abspath(args.output_dir)
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#------------------------

### set up variables to update basic nonstationary noise model

noise_mean_low, noise_mean_high = args.noise_mean_differential_rate_bounds
noise_mean_diff = noise_mean_high - noise_mean_low

#-------------------------------------------------

if args.seed is not None:
    if args.verbose:
        print('setting numpy.random.seed=%d'%args.seed)
    np.random.seed(args.seed)

#-------------------------------------------------

# construct signal and background models
if args.verbose:
    print('instantiating noise model; will update this within each trial')
noise = utils.XrayProcess(0)

if args.verbose:
    print('instantiating signal model')
signal = utils.XrayProcess(args.signal_mean_differential_rate, *args.periodic_signal_component)

#-------------------------------------------------

outpath = os.path.join(args.output_dir, 'make-nonstationary-data%s.hdf5'%args.tag)
if args.verbose:
    print('generating data for %d trials'%args.num_trials)
    print('writing: '+outpath)

if args.histogram:
    nbins = max(10, int(0.25*(args.num_trials*(noise.mean_count+signal.mean_count))**0.5))
    p = np.linspace(0, 2*np.pi, nbins) ### compute cumulative histograms by hand
    n = np.zeros_like(p, dtype=float)
    s = np.zeros_like(p, dtype=float)

with h5py.File(outpath, 'w') as obj:

    ### store basic attributes of experiment
    group = obj.create_group('parameters')

    # noise model (bounded uniform distribution)
    group.attrs.create('noise_mean_differential_rate_low', noise_mean_low)
    group.attrs.create('noise_mean_differential_rate_high', noise_mean_high)

    # signal model
    group.attrs.create('signal_mean_differential_rate', args.signal_mean_differential_rate)

    # experimental parameters
    group.attrs.create('num_trials', args.num_trials)
    group.attrs.create('seed', args.seed if args.seed is not None else 'None')

    ### store periodic signal components
    periodic_signal_components = np.empty(
        len(args.periodic_signal_component),
        dtype=[('harmonic', float), ('amplitude', float), ('phase', float)],
    )
    for i, (m, a, d) in enumerate(args.periodic_signal_component):
        periodic_signal_components[i] = m, a, d

    group.create_dataset('periodic_signal_components', data=periodic_signal_components)

    ### iterate over trials and generate data
    group = obj.create_group('trials')

    for trial in range(args.num_trials):
        name = 'trial-%d'%trial
        if args.Verbose:
            sys.stdout.write('\r    creating: %s'%name)
            sys.stdout.flush()

        grp = group.create_group(name)

        ### update noise process
        noise.mean = noise_mean_low + (noise_mean_diff * np.random.random())
        grp.attrs.create('noise_mean_differential_rate', noise.mean) ### record this

        ### draw variables
        grp.create_dataset('noise', data=noise.draw())
        grp.create_dataset('signal', data=signal.draw())

        if args.histogram: ### record cumulative histogram
            for phase in grp['noise']:
                n[p>=phase] += 1

            for phase in grp['signal']:
                s[p>=phase] += 1

if args.Verbose:
    sys.stdout.write('\n')
    sys.stdout.flush()

#------------------------

if args.histogram:
    if args.verbose:
        print('plotting cumulative histogram')

    fig = plt.figure(figsize=(6,8))
    ax = plt.subplot(2,1,1)
    AX = plt.subplot(2,1,2)

    ### plot noise model
    for label, mean, filled, color in [
            ('noise (min)', noise_mean_low, False, 'g'),
            ('noise (max)', noise_mean_high, False, 'y'),
            ('noise (mean)', 0.5*(noise_mean_low + noise_mean_high), True, 'b'),
        ]:

        noise.mean = mean

        # plot cumulative histograms
        ax.plot(
            noise.phase_grid,
            noise.phase_cdf*noise.mean_count*args.num_trials,
            color=color,
            alpha=0.5,
            label=label,
        )

        if filled:
            ax.fill_between(p, np.zeros_like(p), n, color=color, alpha=0.25)

        # plot differential histograms
        AX.plot(
            noise.phase_grid,
            noise.phase_pdf*noise.mean_count*args.num_trials,
            color=color,
            alpha=0.5,
            label=label,
        )

        if filled:
            x = 0.5*(p[:-1]+p[1:])
            y = np.diff(n) / (p[1]-p[0])
            X = []
            Y = []
            for plow, phigh, y in zip(p[:-1], p[1:], y):
                X += [plow, phigh]
                Y += [y]*2
            AX.fill_between(X, np.zeros_like(X), Y, color=color, alpha=0.25)

    ### plot signal model
    color = 'r'

    ax.plot(
        signal.phase_grid,
        signal.phase_cdf*signal.mean_count*args.num_trials,
        color=color,
        alpha=0.5,
        label='signal',
    )
    ax.fill_between(p, np.zeros_like(p), s, color=color, alpha=0.25)

    # plot differential histograms
    AX.plot(
        signal.phase_grid,
        signal.phase_pdf*signal.mean_count*args.num_trials,
        color='m',
        alpha=0.5,
        label='signal',
    )
    y = np.diff(s) / (p[1]-p[0])
    Y = []
    for y in y:
        Y += [y]*2
    AX.fill_between(X, np.zeros_like(X), Y, color='r', alpha=0.25)

    # decorate
    ax.legend(loc='upper left')

    ax.tick_params(direction='in')
    AX.tick_params(direction='in')

    ax.set_xlim(xmin=0, xmax=2*np.pi)
    ax.set_xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi])
    plt.setp(ax.get_xticklabels(), visible=False)

    AX.set_xlim(ax.get_xlim())
    AX.set_xlabel('phase [rad]')
    AX.set_xticks(ax.get_xticks())
    AX.set_xticklabels(['$0$', '$\pi/2$', '$\pi$', '$3\pi/2$', '$2\pi$'])

    ax.set_ylim(ymin=0)
    ax.set_ylabel('cumulative count')

    AX.set_ylim(ymin=0)
    AX.set_ylabel('differential count')

    plt.subplots_adjust(
        left=0.20,
        right=0.98,
        bottom=0.10,
        top = 0.98,
        hspace=0.05,
    )

    # save
    for figtype in FIGTYPES:
        figname = os.path.join(args.output_dir, 'make-nonstationary-data%s.%s'%(args.tag, figtype))
        if args.verbose:
            print('saving: '+figname)
        fig.savefig(figname)
    plt.close(fig)
