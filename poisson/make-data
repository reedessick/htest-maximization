#!/usr/bin/env python

"""a script to simulate Poissonian sparse X-ray data
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

from argparse import ArgumentParser

### non-standard libraries

import utils

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('--noise-mean', type=float, default=100.0,
    help='the expected number of noise events per experiment')

parser.add_argument('--signal-mean', type=float, default=10.0,
    help='the expected number of signal events per experiment')

parser.add_argument('-s', '--signal-component', nargs=3, type=float, action='append', default=[],
    help='the harmonic, coefficient, and phase for a fourier component in the signal model. \
This only sets the relative amplitude of different harmonics. The overall process will be normalized \
to match --signal-mean. e.g. "--signal-component harmonic_number coefficient phase"')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

# construct signal and background models
noise = utils.XrayProcess(args.noise_mean)
signal = utils.XrayProcess(args.signal_mean, *args.signal_component)

#-------------------------------------------------

raise NotImplementedError('''\
generate a bunch of different realizations
For each realization
    draw noise samples
    draw signal samples
    write both to disk (we can concatenate them later...)
''')
