#!/usr/bin/env python

"""a script that selects subsets of the data and summarizes the detection statistic
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import sys

import numpy as np
import h5py

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
import utils

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('hdf5', type=str)

parser.add_argument('--min-m', default=1, type=int)
parser.add_argument('--max-m', default=20, type=int)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('--trajectory', default=False, action='store_true',
    help='plot the H-test statistic as a function of the amount of data included')

args = parser.parse_args()

args.verbose |= args.Verbose

args.output_dir = os.path.abspath(args.output_dir)
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

# load data
if args.verbose:
    print('loading data from: '+args.hdf5)
trials = []
with h5py.File(args.hdf5, 'r') as obj:
    group = obj['trials']
    Ntrials = obj['parameters'].attrs['num_trials']
    for trial in range(Ntrials):
        name = 'trial-%d'%trial
        if args.Verbose:
            sys.stdout.write('\r    loading: '+name)
            sys.stdout.flush()
        data = np.concatenate((group[name]['noise'][:], group[name]['signal'][:]))
        trials.append((trial, len(data), data))

if args.Verbose:
    sys.stdout.write('\n')
    sys.stdout.flush()

if args.verbose:
    print('found %d trials'%Ntrials)

#------------------------

if args.verbose:
    print('iteratively adding data to maximize H-test statistic')

# first order trials by counts
trials.sort(key=lambda x: x[1]) ### smallest counts first

# make a holder for the H-test results
hstat = np.empty(Ntrials, dtype=[('Hstat', float), ('optimal_harmonic', int), ('cumulative_count', int)])
hstat['cumulative_count'][:] = np.cumsum([_[1] for _ in trials])

# make a big array containing all data, which we can then slice as needed
# do this to avoid reallocating memory repeatedly
data = np.empty(hstat['cumulative_count'][-1], dtype=float)

# now iterate over trials
start = 0
for trial, (_, n, datum) in enumerate(trials):
    if args.Verbose:
        sys.stdout.write('\r    computing H-statistic including %d trials'%(trial+1))
        sys.stdout.flush()

    stop = start + n
    data[start:stop] = datum[:] ### fill in more data

    ### FIXME: we can do this more efficiently
    ### generate cumulative counters for the empirical fourier moments. Then we can just add more data to that and only keep 2 scalars. This also means there will be much less memory needed
    ### we then take the average, etc by hand to get the H-statistic

    ### compute H-test up to and including this datum
    hstat['Hstat'][trial], hstat['optimal_harmonic'][trial] = utils.htest_statistic(
        data[:stop], ### make sure to include data cumulatively
        mmin=args.min_m,
        mmax=args.max_m,
    )

    # increment start position of next datum
    start = stop

if args.Verbose:
    sys.stdout.write('\n')
    sys.stdout.flush()

del trials ### forget this in an attempt to save memory

#------------------------

outpath = os.path.join(args.output_dir, 'downselect-data%s.hdf5'%args.tag)
if args.verbose:
    print('writing: '+outpath)
with h5py.File(outpath, 'w') as obj:
    obj.create_dataset('hstatistics', data=hstat) 

#-------------------------------------------------

if args.trajectory:
    if args.verbose:
        print('plotting trajectory')

    ### FIXME: add trajectories for:
    ###     * number of samples included?

    fig = plt.figure(figsize=(6,8))
    ax = plt.subplot(3,1,1)
    aX = plt.subplot(3,1,2)
    AX = plt.subplot(3,1,3)

    x = np.arange(Ntrials)+1 ### number of trials included

    # plot H-test statistic
    ax.plot(x, hstat['Hstat'])

    # plot optimal number of harmonics
    aX.plot(x, hstat['optimal_harmonic'])

    # plot amount of data included
    AX.plot(x, hstat['cumulative_count'])

    # decorate
    ax.tick_params(direction='in')

    diff = (x[-1]-x[0])*0.02
    ax.set_xlim(xmin=1-diff, xmax=Ntrials+diff)
    plt.setp(ax.get_xticklabels(), visible=False)

    aX.set_xlim(ax.get_xlim())
    plt.setp(aX.get_xticklabels(), visible=False)

    AX.set_xlim(ax.get_xlim())
    AX.set_xlabel('number of trials included')

    ax.set_ylabel('H-test\nstatistic')
    aX.set_ylabel('optimal number\nof harmonics')
    AX.set_ylabel('number of samples included')

    plt.subplots_adjust(
        left=0.20,
        right=0.98,
        bottom=0.10,
        top = 0.98,
        hspace=0.05,
    )

    # add location of maxima
    ind = np.argmax(hstat['Hstat'])
    kwargs = dict(linestyle='solid', color='grey', alpha=0.5)

    xmin, xmax = ax.get_xlim()
    ymin, ymax = ax.get_ylim()
    ax.plot([xmin, xmax], [hstat['Hstat'][ind]]*2, **kwargs)
    ax.plot([x[ind]]*2, [ymin, hstat['Hstat'][ind]], **kwargs)
    ax.set_ylim(ymin=ymin, ymax=ymax)

    ymin, ymax = aX.get_ylim()
    aX.plot([xmin, xmax], [hstat['optimal_harmonic'][ind]]*2, **kwargs)
    aX.plot([x[ind]]*2, [ymin, ymax], **kwargs)
    aX.set_ylim(ymin=ymin, ymax=ymax)

    ymin, ymax = AX.get_ylim()
    AX.plot([xmin, xmax], [hstat['cumulative_count'][ind]]*2, **kwargs)
    AX.plot([x[ind]]*2, [ymin, ymax], **kwargs)
    AX.set_ylim(ymin=ymin, ymax=ymax)

    # save
    figname = os.path.join(args.output_dir, 'downselect-data%s.png'%args.tag)
    if args.verbose:
        print('saving: '+figname)
    fig.savefig(figname)
    plt.close(fig)
