#!/usr/bin/env python

"""a script to compare the distribution of detection statistics under different data-selection algorithms
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import sys

import numpy as np
import h5py

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
import corner

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('--hdf5', type=str, nargs='+', required=True)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

args.verbose |= args.Verbose

args.output_dir = os.path.abspath(args.output_dir)
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

# load data
Nhdf5 = len(args.hdf5)

if args.verbose:
    print('loading detection statistic data from %d realizations'%Nhdf5)

alldata = np.empty(
    Nhdf5,
    dtype=[('H', float), ('Z2', float), ('m', float), ('count', int), ('num_seg', int)],
)
subset = np.empty(
    Nhdf5,
    dtype=[('H', float), ('Z2', float), ('m', float), ('count', int), ('num_seg', int)],
)

for ind, path in enumerate(args.hdf5):
    if args.Verbose:
        sys.stdout.write('\r    loading: %s'%path)
        sys.stdout.flush()

    # load statistics
    with h5py.File(path, 'r') as obj:
        stat = obj['statistis']['htest'][:]

    # extract parameters from the structured array
    alldata['H'][ind] = stat['Hstat'][-1]
    alldata['Z2'][ind] = stat['Z2'][-1]
    alldata['m'][ind] = stat['optimal_harmonic'][-1]
    alldata['count'][ind] = stat['cumulative_count'][-1]
    alldata['num_seg'][ind] = len(stat)

    maxH_ind = np.argmax(stat['Hstat'])
    subset['H'][ind] = stat['Hstat'][maxH_ind]
    subset['Z2'][ind] = stat['Z2'][maxH_ind]
    subset['m'][ind] = stat['optimal_harmonic'][maxH_ind]
    subset['count'][ind] = stat['cumulative_count'][maxH_ind]
    subset['num_seg'][ind] = maxH_ind + 1

if args.Verbose:
    sys.stdout.write('\n')
    sys.stdout.flush()

#-------------------------------------------------

# plot data

if args.verbose:
    print('plotting distributions of detection statistics')

raise NotImplementedError('''\
make a corner plot of 
  * Htest statistic
  * Z^2
  * optimal number of harmonics
  * Ntrials
  * etc
''')
