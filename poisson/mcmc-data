#!/usr/bin/env python

"""run an mcmc algorithm to sample from a posterior conditioned on the supplied dataset
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np
import h5py

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
import emcee

import utils

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('observed_data', type=str,
    help='the HDF5 document containing samples and true parameters')

parser.add_argument('selection_effect_simulations', type=str,
    help='the HDF5 document containing many realizations of segments that pass a selection cut. \
These will be reweighed within an importance-sampling monte-carlo summation to approximate selection effects.')

parser.add_argument('-N', '--num-bins', default=32, type=int,
    help='the number of bins to use when fitting light curves')
parser.add_argument('-m', '--harmonic', default=[], type=int, action='append',
    help='the number of harmonics to use when fitting light curves')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

args.output_dir = os.path.abspath(args.output_dir)
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

### load data
if args.verbose:
    print('loading observed data from: '+args.observed_data)

data = []
with h5py.File(args.observed_data, 'r') as obj:

    # grab true parameters
    group = obj['parameters']
    truth = dict(group.attrs.items())
    truth['periodic_signal_components'] = group['periodic_signal_components'][:]

    # grab data
    group = obj['trials']
    Ntrials = len(group.keys())
    for key in group.keys():
        data += [group[key]['noise'][:], group[key]['signal'][:]]

data = np.concatenate(tuple(data))

if args.verbose:
    print('found %d events from %d trials'%(len(data), Ntrials))

#------------------------

if args.verbose:
    print('loading selection-effect simulations from: '+args.selection_effect_simulations)

selection_trials = []
with h5py.File(args.selection_effect_simulations, 'r') as obj:
    # load true parameters
    group = obj['parameters']
    selection_truth = dict(group.attrs.items())
    selection_truth['periodic_signal_components'] = group['periodic_signal_components'][:]

    # load separate trials
    group = obj['trials']
    for key in group.keys():
        selection_trials.append( np.concatenate((group[key]['noise'][:], group[key]['signal'][:])) )

N_total_selection_trials = selection_truth['num_trials']

raise NotImplementedError('''\
need to set up everything we need to compute the selection effects efficiently.
''')

#-------------------------------------------------

# instantiate objects
if args.verbose:
    print('instantiating XrayProcess and BinnedPosterior with %d phase bins'%args.num_bins)

process = utils.XrayProcess(
    Ntrials*(truth['noise_mean_differential_rate']+truth['signal_mean_differential_rate']),
    *[(m, Ntrials*a, d) for m, a, d in truth['periodic_signal_components']]
)

posterior = utils.BinnedPosterior(data, args.num_bins, process=process)

#---------------------------

raise NotImplementedError('''\
need to define a function that will each signal parameters, update the process object, and then call the posterior object to get the probability

instantiate walkers around the true parameters

run sampler for some period of time, obtain posteriors

write posteriors to disk
''')
