#!/usr/bin/env python

"""a script to fit the selected data
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import sys

import numpy as np
import h5py

from argparse import ArgumentParser

### non-standard libraries
import utils

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('hdf5', type=str)

parser.add_argument('-N', '--num-bins', default=32, type=int,
    help='the number of bins to use when fitting light curves')
parser.add_argument('-M', '--num-harmonics', default=10, type=int,
    help='the number of harmonics to use when fitting light curves')

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

args.verbose |= args.Verbose

args.output_dir = os.path.abspath(args.output_dir)
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

# load data
if args.verbose:
    print('loading data and parameters from: '+args.hdf5)

data = []
with h5py.File(args.hdf5, 'r') as obj:
    # load parameters
    group = obj['parameters']
    attrs = dict(group.attrs.items())
    attrs['periodic_signal_components'] = group['periodic_signal_components'][:]

    # load data
    group = obj['trials']
    for name in group.keys():
        if args.Verbose:
            sys.stdout.write('\r    loading: '+name)
            sys.stdout.flush()
        data.append( group[name]['noise'][:] )
        data.append( group[name]['signal'][:] )

if args.Verbose:
    sys.stdout.write('\n')
    sys.stdout.flush()

data = np.concatenate(tuple(data)) # make this into a single array

if args.verbose:
    print('found %d data points'%len(data))

#-------------------------------------------------

# compute MLE estimate
if args.verbose:
    print('instantiating likelihood object')
like = utils.BinnedLikelihood(args.num_bins)

if args.verbose:
    print('binning data')
binned_data = like.bin(data)

if args.verbose:
    print('computing MLE XrayProcess with %d harmonics'%args.num_harmonics)
lambda0, ac_components = like.mle(binned_data, M=args.num_harmonics)

print('lambda0 = %.6e'%lambda0)
for m, a, d in ac_components:
    print('a_%d = %.6e\nd_%d = %.6e'%(m, a, m, d))

#-------------------------------------------------

# store MLE results alongside simulation parameters
raise NotImplementedError('''\
write everything to disk in a file format matching what we had before''')
