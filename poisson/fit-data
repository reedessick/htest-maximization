#!/usr/bin/env python

"""a script to fit the selected data
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import sys

import numpy as np
import h5py

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
import utils

#-------------------------------------------------

FIGTYPES = ['png', 'pdf']

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('hdf5', type=str)

parser.add_argument('-N', '--num-bins', default=32, type=int,
    help='the number of bins to use when fitting light curves')
parser.add_argument('-m', '--harmonic', default=[], type=int, action='append',
    help='the number of harmonics to use when fitting light curves')

parser.add_argument('--random-subset-same-num', default=False, action='store_true',
    help='if specified, select a random subset of segments and fit those \
instead of only the selected ones')

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

parser.add_argument('--histogram', default=False, action='store_true',
    help='plot a histogram of binned data and XrayProcess models')

args = parser.parse_args()

args.verbose |= args.Verbose

args.output_dir = os.path.abspath(args.output_dir)
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

# load data
if args.verbose:
    print('loading data and parameters from: '+args.hdf5)

Ntrials = 0
data = []
with h5py.File(args.hdf5, 'r') as obj:
    # load parameters
    group = obj['parameters']
    attrs = dict(group.attrs.items())
    attrs['periodic_signal_components'] = group['periodic_signal_components'][:]

    # load data
    group = obj['trials']
    for name in group.keys():
        if args.Verbose:
            sys.stdout.write('\r    loading: '+name)
            sys.stdout.flush()
        data.append( (group[name]['noise'][:], group[name]['signal'][:]) )
        Ntrials += 1

    if args.random_subset_same_num: # load the rest of the data, downselect later
        group = obj['discarded_trials']
        for name in group.keys():
            if args.Verbose:
                sys.stdout.write('\r    loading: '+name)
                sys.stdout.flush()
            data.append( (group[name]['noise'][:], group[name]['signal'][:]) )

if args.Verbose:
    sys.stdout.write('\n')
    sys.stdout.flush()

if args.random_subset_same_num:
    # downselect to keep only Ntrials randomly selected
    if args.verbose:
        print('randomly selecting a subset of %d / %d trials'%(Ntrials, len(data)))
    np.random.shuffle(data)
    data = data[:Ntrials]

data = np.concatenate(tuple([np.concatenate(_) for _ in data])) # make this into a single array

if args.verbose:
    print('found %d data points from %d trials'%(len(data), Ntrials))

#-------------------------------------------------

# compute MLE estimate
if args.verbose:
    print('instantiating likelihood object')
like = utils.BinnedLikelihood(args.num_bins)

if args.verbose:
    print('binning data')
binned_data = like.bin(data)

if args.verbose:
    print('computing MLE XrayProcess with %d harmonics: m=(%s)'% \
        (len(args.harmonic), ','.join('%d'%_ for _ in args.harmonic)))
lambda0, ac_components = like.mle(binned_data, harmonics=sorted(args.harmonic))

# compute likelihood at these parameters
if args.verbose:
    print('computing likelihood at true and MLE parameters')

### true process
true_lambda0 = Ntrials * (attrs['noise_mean_differential_rate'] + attrs['signal_mean_differential_rate'])
true_ac_components = list(zip(
    attrs['periodic_signal_components']['harmonic'],
    Ntrials * attrs['periodic_signal_components']['amplitude'],
    attrs['periodic_signal_components']['phase'],
))
true_process = utils.XrayProcess(true_lambda0, *true_ac_components)

like.process = true_process
true_loglike = like.logprob(binned_data)
true_approx_loglike = like.approximate_logprob(binned_data)

### mle process
mle_process = utils.XrayProcess(lambda0, *ac_components)

like.process = mle_process
max_loglike = like.logprob(binned_data)
max_approx_loglike = like.approximate_logprob(binned_data)

### NOTE: 
# now we normalize by the number of trials to make a fair comparison to the simulation parameters
# that are specified/stored in the HDF5 files
true_lambda0 = true_lambda0 / Ntrials
true_ac_components = [(m, a/Ntrials, d) for m, a, d in true_ac_components]

lambda0 = lambda0 / Ntrials
ac_components = [(m, a/Ntrials, d) for m, a, d in ac_components]

### report
if args.Verbose:
    print('True Simulation Parameters')
    print('    logLikelihood = %.6e'%true_loglike)
    print('    approx logLikelihood = %.6e'%true_approx_loglike)
    print('    lambda0 = lambda_noise + lambda_signal\n            = %.6e'%(true_lambda0))
    for m, a, d in true_ac_components:
        print('    a_%d = %.6e\n    d_%d = %.6e'%(m, a, m, d))

    print('Maximum-Likelihood Estimate')
    print('    max(logLikelihood) = %.6e'%max_loglike)
    print('    max(approx logLikelihood) = %.6e'%max_approx_loglike)
    print('    lambda0 = %.6e'%lambda0)
    for m, a, d in ac_components:
        print('    a_%d = %.6e\n    d_%d = %.6e'%(m, a, m, d))

#-------------------------------------------------

# store MLE results alongside simulation parameters
outpath = os.path.join(args.output_dir, 'fit-data%s.hdf5'%args.tag)
if args.verbose:
    print('writing: '+outpath)

with h5py.File(outpath, 'w') as obj:

    ### store basic attributes of experiment
    group = obj.create_group('parameters')
    group.create_dataset('periodic_signal_components', data=attrs.pop('periodic_signal_components'))
    for key, val in attrs.items():
        group.attrs.create(key, val)
    group.attrs.create('loglikelihood(true_params)', true_loglike)
    group.attrs.create('approximate_loglikelihood(true_params)', true_approx_loglike)

    ### store the fit parameters
    group = obj.create_group('maximum-likelihood-estimate')

    group.attrs.create('mean_differential_rate', lambda0)
    group.attrs.create('num_trials', Ntrials)
    group.attrs.create('loglikelihood(mle_params)', max_loglike)
    group.attrs.create('approximate_loglikelihood(mle_params)', max_approx_loglike)

    periodic_signal_components = np.empty(
        len(ac_components),
        dtype=[('harmonic', float), ('amplitude', float), ('phase', float)],
    )
    for i, (m, a, d) in enumerate(ac_components):
        periodic_signal_components[i] = m, a, d

    group.create_dataset('periodic_signal_components', data=periodic_signal_components)

#-------------------------------------------------

if args.histogram:
    if args.verbose:
        print('plotting binned_data and XrayProcess models')

    fig = plt.figure()
    ax = fig.gca()

    # compute binned mean counts for true and mle processes
    like.process = true_process
    truth = like.binned_means

    like.process = mle_process
    mle = like.binned_means

    ### plot binned data
    x = []
    d = []
    t = []
    m = []
    for l, r, datum, truth, mle in zip(like.bins[:-1], like.bins[1:], binned_data, truth, mle):
        x += [l, r]
        d += [datum]*2
        t += [truth]*2
        m += [mle]*2

    d = np.array(d)
    s = d**0.5

    ymin = min(min(d-3*s), min(t), min(m))
    ymax = max(max(d+3*s), max(t), max(m))
    dy = (ymax-ymin)*0.05
    ymin -= dy
    ymax += dy

    for ind in [3, 2, 1]:
        ax.fill_between(x, d-ind*s, d+ind*s, color='grey', alpha=0.25)
    ax.plot(x, d, color='k', label='data')

    ax.plot(x, t, color='r', label='true process')
    ax.plot(x, m, color='b', label='MLE process')

    ### decorate
    ax.set_xlabel('phase [rad]')
    ax.set_xlim(xmin=0, xmax=2*np.pi)
    ax.set_xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi])
    ax.set_xticklabels(['$0$', '$\pi/2$', '$\pi$', '$3\pi/2$', '$2\pi$'])

    ax.set_ylabel('count')
    ax.set_ylim(ymin=ymin, ymax=ymax)

    ax.legend(loc='best')

    plt.subplots_adjust(
        left=0.12,
        right=0.98,
        bottom=0.10,
        top = 0.98,
        hspace=0.05,
    )

    # save
    for figtype in FIGTYPES:
        figname = os.path.join(args.output_dir, 'fit-data%s.%s'%(args.tag, figtype))
        if args.verbose:
            print('saving: '+figname)
        fig.savefig(figname)
    plt.close(fig)
